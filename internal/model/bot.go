package model

import (
	"fmt"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/pkg/errors"
	"gitlab.ozon.dev/almenschhikov/go-course-4/internal/dto"
)

const (
	addHelp = `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:
` + "```" + `
/add [–¥–∞—Ç–∞] <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>
` + "```" + `
–î–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *dd\.mm\.yyyy* \(–¥–µ–Ω—å\.–º–µ—Å—è—Ü\.–≥–æ–¥\)\.
–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ *@* –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞—Ç—ã, –∏–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–≤—Å–µ–º\.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ *\-Nd*, –≥–¥–µ N ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–¥–Ω–µ–π –Ω–∞–∑–∞–¥" \(1 –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å\)\.
–ù–∞–ø—Ä–∏–º–µ—Ä, *\-2d* –∑–Ω–∞—á–∏—Ç "2 –¥–Ω—è –Ω–∞–∑–∞–¥"\.

–°—É–º–º–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *XX\[\.yy\]*: —Ü–µ–ª–æ–≥–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å –æ–¥–Ω–∏–º –∏–ª–∏ –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π \(–≤–º–µ—Å—Ç–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–∫—É\)\.`
	reportHelp = `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ \(w ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é, m ‚Äî –∑–∞ –º–µ—Å—è—Ü, y ‚Äî –∑–∞ –≥–æ–¥\):
` + "```" + `
/report \[N\]w
/report \[N\]m
/report \[N\]y
` + "```" + `
–ï—Å–ª–∏ –∑–∞–¥–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ N, –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–¥–µ–ª—å/–º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç\.`
)

var (
	commandRx = regexp.MustCompile(`^/(\w+)\b(.*)$`)
	addRx     = regexp.MustCompile(`^(|@|-\d+d|\d{2}\.\d{2}\.\d{4})\s*(\d+(?:[.,]\d+)?) (.+)$`)
	reportRx  = regexp.MustCompile(`^(\d*)([wmy])$`)
)

type MessageSender interface {
	SendMessage(userID int64, text string) error
}

type ExpenseStorage interface {
	Init(userID int64)
	Add(userID int64, date time.Time, amount int64, category string) error
	List(userID int64, from time.Time) map[string]int64
}

type Bot struct {
	sender  MessageSender
	storage ExpenseStorage
}

func NewBot(sender MessageSender, storage ExpenseStorage) *Bot {
	return &Bot{
		sender:  sender,
		storage: storage,
	}
}

func (b *Bot) HandleMessage(msg dto.Message) error {
	m := commandRx.FindStringSubmatch(msg.Text)

	command, args := m[1], m[2]
	args = strings.TrimSpace(args)

	var response string

	switch command {
	case "start":
		response = b.start(msg.UserID)

	case "add":
		response = b.addExpense(args, msg.UserID)

	case "report":
		response = b.report(args, msg.UserID)

	default:
		response = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã\\. üôÅ\n\n" + addHelp + "\n\n\n" + reportHelp
	}

	return b.sender.SendMessage(msg.UserID, response)
}

func (b *Bot) start(userID int64) string {
	b.storage.Init(userID)

	return "–ü—Ä–∏–≤–µ—Ç\\! üëã\n\n" + addHelp + "\n\n\n" + reportHelp
}

func (b *Bot) addExpense(args string, userID int64) string {
	m := addRx.FindStringSubmatch(args)
	if len(m) == 0 {
		return addHelp
	}

	date, amount, category, err := parseAddArgs(m[1:])
	if err == nil {
		err = b.storage.Add(userID, date, amount, category)
	}

	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\\.\n–û—à–∏–±–∫–∞: " + err.Error() + "\\.\n\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n" + addHelp
	}

	return "–ì–æ—Ç–æ–≤–æ\\!"
}

func parseAddArgs(args []string) (date time.Time, amount int64, category string, err error) {
	if date, err = parseDate(args[0]); err != nil {
		return
	}

	floatAmount, err := strconv.ParseFloat(strings.ReplaceAll(args[1], ",", "."), 64)
	if err != nil {
		err = errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É")
	}

	amount = int64(floatAmount * 100)

	category = strings.TrimSpace(args[2])

	return
}

func parseDate(input string) (time.Time, error) {
	if input == "" || input == "@" {
		return time.Now(), nil
	}

	if input[0] == '-' {
		rate, err := strconv.ParseUint(input[1:len(input)-1], 10, 64)
		if err != nil {
			return time.Time{}, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É")
		}

		return time.Now().Add(-time.Duration(rate) * 24 * time.Hour), nil
	}

	date, err := time.Parse("02.01.2006", input)
	if err != nil {
		return time.Time{}, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É")
	}

	return date, nil
}

func (b *Bot) report(args string, userID int64) string {
	m := reportRx.FindStringSubmatch(args)
	if len(m) == 0 {
		return reportHelp
	}

	from, err := parseReportArgs(m[1:])
	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\\.\n–û—à–∏–±–∫–∞: " + err.Error() + "\\.\n\n\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏:\n" + reportHelp
	}

	data := b.storage.List(userID, from)
	if len(data) == 0 {
		return "–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞\\."
	}

	categories := make([]string, 0, len(data))
	for category := range data {
		categories = append(categories, category)
	}

	sort.Strings(categories)

	response := fmt.Sprintf("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —Å %s:\n", from.Format("02\\.01\\.2006"))

	for _, category := range categories {
		response += strings.ReplaceAll(fmt.Sprintf("%s: %.2f\n", category, float64(data[category])/100), ".", "\\.")
	}

	return response
}

func parseReportArgs(args []string) (time.Time, error) {
	hours := 1

	if args[0] != "" {
		rate, err := strconv.ParseUint(args[0], 10, 64)
		if err != nil {
			return time.Time{}, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
		}
		hours *= int(rate)
	}

	switch args[1] {
	case "w":
		hours *= 24 * 7
	case "m":
		hours *= 24 * 30
	case "y":
		hours *= 24 * 365
	}

	duration, err := time.ParseDuration(fmt.Sprintf("%dh", hours))
	if err != nil {
		return time.Time{}, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
	}

	return time.Now().Truncate(24 * time.Hour).Add(-duration), nil
}
