// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/expense/reporter.go

// Package mock_expense is a generated GoMock package.
package mock_expense

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "gitlab.ozon.dev/almenschhikov/go-course-4/internal/types"
)

// Mockproducer is a mock of producer interface.
type Mockproducer struct {
	ctrl     *gomock.Controller
	recorder *MockproducerMockRecorder
}

// MockproducerMockRecorder is the mock recorder for Mockproducer.
type MockproducerMockRecorder struct {
	mock *Mockproducer
}

// NewMockproducer creates a new mock instance.
func NewMockproducer(ctrl *gomock.Controller) *Mockproducer {
	mock := &Mockproducer{ctrl: ctrl}
	mock.recorder = &MockproducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockproducer) EXPECT() *MockproducerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *Mockproducer) Send(ctx context.Context, user *types.User, from time.Time, currency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, user, from, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockproducerMockRecorder) Send(ctx, user, from, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mockproducer)(nil).Send), ctx, user, from, currency)
}

// Mocklistener is a mock of listener interface.
type Mocklistener struct {
	ctrl     *gomock.Controller
	recorder *MocklistenerMockRecorder
}

// MocklistenerMockRecorder is the mock recorder for Mocklistener.
type MocklistenerMockRecorder struct {
	mock *Mocklistener
}

// NewMocklistener creates a new mock instance.
func NewMocklistener(ctrl *gomock.Controller) *Mocklistener {
	mock := &Mocklistener{ctrl: ctrl}
	mock.recorder = &MocklistenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklistener) EXPECT() *MocklistenerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *Mocklistener) Subscribe(user *types.User) <-chan types.Report {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", user)
	ret0, _ := ret[0].(<-chan types.Report)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MocklistenerMockRecorder) Subscribe(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*Mocklistener)(nil).Subscribe), user)
}

// Unsubscribe mocks base method.
func (m *Mocklistener) Unsubscribe(user *types.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", user)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MocklistenerMockRecorder) Unsubscribe(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*Mocklistener)(nil).Unsubscribe), user)
}
