// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/controller.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	request "gitlab.ozon.dev/almenschhikov/go-course-4/internal/dto/request"
	response "gitlab.ozon.dev/almenschhikov/go-course-4/internal/dto/response"
	types "gitlab.ozon.dev/almenschhikov/go-course-4/internal/types"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockController) AddExpense(ctx context.Context, req request.AddExpense) response.AddExpense {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx, req)
	ret0, _ := ret[0].(response.AddExpense)
	return ret0
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockControllerMockRecorder) AddExpense(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockController)(nil).AddExpense), ctx, req)
}

// GetReport mocks base method.
func (m *MockController) GetReport(ctx context.Context, req request.GetReport) response.GetReport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, req)
	ret0, _ := ret[0].(response.GetReport)
	return ret0
}

// GetReport indicates an expected call of GetReport.
func (mr *MockControllerMockRecorder) GetReport(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockController)(nil).GetReport), ctx, req)
}

// ListCurrencies mocks base method.
func (m *MockController) ListCurrencies(ctx context.Context, req request.ListCurrencies) response.ListCurrencies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrencies", ctx, req)
	ret0, _ := ret[0].(response.ListCurrencies)
	return ret0
}

// ListCurrencies indicates an expected call of ListCurrencies.
func (mr *MockControllerMockRecorder) ListCurrencies(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrencies", reflect.TypeOf((*MockController)(nil).ListCurrencies), ctx, req)
}

// ListLimits mocks base method.
func (m *MockController) ListLimits(ctx context.Context, req request.ListLimits) response.ListLimits {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLimits", ctx, req)
	ret0, _ := ret[0].(response.ListLimits)
	return ret0
}

// ListLimits indicates an expected call of ListLimits.
func (mr *MockControllerMockRecorder) ListLimits(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLimits", reflect.TypeOf((*MockController)(nil).ListLimits), ctx, req)
}

// SetCurrency mocks base method.
func (m *MockController) SetCurrency(ctx context.Context, req request.SetCurrency) response.SetCurrency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrency", ctx, req)
	ret0, _ := ret[0].(response.SetCurrency)
	return ret0
}

// SetCurrency indicates an expected call of SetCurrency.
func (mr *MockControllerMockRecorder) SetCurrency(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrency", reflect.TypeOf((*MockController)(nil).SetCurrency), ctx, req)
}

// SetLimit mocks base method.
func (m *MockController) SetLimit(ctx context.Context, req request.SetLimit) response.SetLimit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLimit", ctx, req)
	ret0, _ := ret[0].(response.SetLimit)
	return ret0
}

// SetLimit indicates an expected call of SetLimit.
func (mr *MockControllerMockRecorder) SetLimit(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLimit", reflect.TypeOf((*MockController)(nil).SetLimit), ctx, req)
}

// Mockexpenser is a mock of expenser interface.
type Mockexpenser struct {
	ctrl     *gomock.Controller
	recorder *MockexpenserMockRecorder
}

// MockexpenserMockRecorder is the mock recorder for Mockexpenser.
type MockexpenserMockRecorder struct {
	mock *Mockexpenser
}

// NewMockexpenser creates a new mock instance.
func NewMockexpenser(ctrl *gomock.Controller) *Mockexpenser {
	mock := &Mockexpenser{ctrl: ctrl}
	mock.recorder = &MockexpenserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockexpenser) EXPECT() *MockexpenserMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockexpenser) Add(ctx context.Context, user *types.User, date time.Time, amount int64, currency, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, user, date, amount, currency, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockexpenserMockRecorder) Add(ctx, user, date, amount, currency, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockexpenser)(nil).Add), ctx, user, date, amount, currency, category)
}

// Report mocks base method.
func (m *Mockexpenser) Report(ctx context.Context, user *types.User, from time.Time) (map[string][]types.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, user, from)
	ret0, _ := ret[0].(map[string][]types.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockexpenserMockRecorder) Report(ctx, user, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*Mockexpenser)(nil).Report), ctx, user, from)
}

// Mocklimiter is a mock of limiter interface.
type Mocklimiter struct {
	ctrl     *gomock.Controller
	recorder *MocklimiterMockRecorder
}

// MocklimiterMockRecorder is the mock recorder for Mocklimiter.
type MocklimiterMockRecorder struct {
	mock *Mocklimiter
}

// NewMocklimiter creates a new mock instance.
func NewMocklimiter(ctrl *gomock.Controller) *Mocklimiter {
	mock := &Mocklimiter{ctrl: ctrl}
	mock.recorder = &MocklimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklimiter) EXPECT() *MocklimiterMockRecorder {
	return m.recorder
}

// Decrease mocks base method.
func (m *Mocklimiter) Decrease(ctx context.Context, user *types.User, value int64, category string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrease", ctx, user, value, category)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrease indicates an expected call of Decrease.
func (mr *MocklimiterMockRecorder) Decrease(ctx, user, value, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrease", reflect.TypeOf((*Mocklimiter)(nil).Decrease), ctx, user, value, category)
}

// Get mocks base method.
func (m *Mocklimiter) Get(ctx context.Context, user *types.User, category string) (types.LimitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, user, category)
	ret0, _ := ret[0].(types.LimitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocklimiterMockRecorder) Get(ctx, user, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mocklimiter)(nil).Get), ctx, user, category)
}

// List mocks base method.
func (m *Mocklimiter) List(ctx context.Context, user *types.User) (map[string]types.LimitItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, user)
	ret0, _ := ret[0].(map[string]types.LimitItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MocklimiterMockRecorder) List(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mocklimiter)(nil).List), ctx, user)
}

// Set mocks base method.
func (m *Mocklimiter) Set(ctx context.Context, user *types.User, limit int64, currency, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, user, limit, currency, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MocklimiterMockRecorder) Set(ctx, user, limit, currency, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mocklimiter)(nil).Set), ctx, user, limit, currency, category)
}

// Unset mocks base method.
func (m *Mocklimiter) Unset(ctx context.Context, user *types.User, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", ctx, user, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MocklimiterMockRecorder) Unset(ctx, user, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*Mocklimiter)(nil).Unset), ctx, user, category)
}

// Mockrater is a mock of rater interface.
type Mockrater struct {
	ctrl     *gomock.Controller
	recorder *MockraterMockRecorder
}

// MockraterMockRecorder is the mock recorder for Mockrater.
type MockraterMockRecorder struct {
	mock *Mockrater
}

// NewMockrater creates a new mock instance.
func NewMockrater(ctrl *gomock.Controller) *Mockrater {
	mock := &Mockrater{ctrl: ctrl}
	mock.recorder = &MockraterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrater) EXPECT() *MockraterMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *Mockrater) Exchange(ctx context.Context, value int64, from, to string, date time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, value, from, to, date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockraterMockRecorder) Exchange(ctx, value, from, to, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*Mockrater)(nil).Exchange), ctx, value, from, to, date)
}

// Ready mocks base method.
func (m *Mockrater) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockraterMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*Mockrater)(nil).Ready))
}

// Run mocks base method.
func (m *Mockrater) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockraterMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockrater)(nil).Run), ctx)
}

// MockcurrencyManager is a mock of currencyManager interface.
type MockcurrencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockcurrencyManagerMockRecorder
}

// MockcurrencyManagerMockRecorder is the mock recorder for MockcurrencyManager.
type MockcurrencyManagerMockRecorder struct {
	mock *MockcurrencyManager
}

// NewMockcurrencyManager creates a new mock instance.
func NewMockcurrencyManager(ctrl *gomock.Controller) *MockcurrencyManager {
	mock := &MockcurrencyManager{ctrl: ctrl}
	mock.recorder = &MockcurrencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrencyManager) EXPECT() *MockcurrencyManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockcurrencyManager) Get(ctx context.Context, user *types.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcurrencyManagerMockRecorder) Get(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockcurrencyManager)(nil).Get), ctx, user)
}

// ListCurrenciesCodesWithFlags mocks base method.
func (m *MockcurrencyManager) ListCurrenciesCodesWithFlags() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCurrenciesCodesWithFlags")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListCurrenciesCodesWithFlags indicates an expected call of ListCurrenciesCodesWithFlags.
func (mr *MockcurrencyManagerMockRecorder) ListCurrenciesCodesWithFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrenciesCodesWithFlags", reflect.TypeOf((*MockcurrencyManager)(nil).ListCurrenciesCodesWithFlags))
}

// Set mocks base method.
func (m *MockcurrencyManager) Set(ctx context.Context, user *types.User, currency string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, user, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockcurrencyManagerMockRecorder) Set(ctx, user, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockcurrencyManager)(nil).Set), ctx, user, currency)
}
