// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/types.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "gitlab.ozon.dev/almenschhikov/go-course-4/internal/types"
)

// MockTelegramUserStorage is a mock of TelegramUserStorage interface.
type MockTelegramUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramUserStorageMockRecorder
}

// MockTelegramUserStorageMockRecorder is the mock recorder for MockTelegramUserStorage.
type MockTelegramUserStorageMockRecorder struct {
	mock *MockTelegramUserStorage
}

// NewMockTelegramUserStorage creates a new mock instance.
func NewMockTelegramUserStorage(ctrl *gomock.Controller) *MockTelegramUserStorage {
	mock := &MockTelegramUserStorage{ctrl: ctrl}
	mock.recorder = &MockTelegramUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramUserStorage) EXPECT() *MockTelegramUserStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTelegramUserStorage) Add(tgUserID int64) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tgUserID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockTelegramUserStorageMockRecorder) Add(tgUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTelegramUserStorage)(nil).Add), tgUserID)
}

// FetchByID mocks base method.
func (m *MockTelegramUserStorage) FetchByID(tgUserID int64) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByID", tgUserID)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByID indicates an expected call of FetchByID.
func (mr *MockTelegramUserStorageMockRecorder) FetchByID(tgUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByID", reflect.TypeOf((*MockTelegramUserStorage)(nil).FetchByID), tgUserID)
}

// MockExpenseStorage is a mock of ExpenseStorage interface.
type MockExpenseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseStorageMockRecorder
}

// MockExpenseStorageMockRecorder is the mock recorder for MockExpenseStorage.
type MockExpenseStorageMockRecorder struct {
	mock *MockExpenseStorage
}

// NewMockExpenseStorage creates a new mock instance.
func NewMockExpenseStorage(ctrl *gomock.Controller) *MockExpenseStorage {
	mock := &MockExpenseStorage{ctrl: ctrl}
	mock.recorder = &MockExpenseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseStorage) EXPECT() *MockExpenseStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockExpenseStorage) Add(user *types.User, item types.ExpenseItem, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", user, item, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockExpenseStorageMockRecorder) Add(user, item, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExpenseStorage)(nil).Add), user, item, category)
}

// List mocks base method.
func (m *MockExpenseStorage) List(user *types.User, from time.Time) (map[string][]types.ExpenseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", user, from)
	ret0, _ := ret[0].(map[string][]types.ExpenseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExpenseStorageMockRecorder) List(user, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpenseStorage)(nil).List), user, from)
}

// MockExpenseLimitStorage is a mock of ExpenseLimitStorage interface.
type MockExpenseLimitStorage struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseLimitStorageMockRecorder
}

// MockExpenseLimitStorageMockRecorder is the mock recorder for MockExpenseLimitStorage.
type MockExpenseLimitStorageMockRecorder struct {
	mock *MockExpenseLimitStorage
}

// NewMockExpenseLimitStorage creates a new mock instance.
func NewMockExpenseLimitStorage(ctrl *gomock.Controller) *MockExpenseLimitStorage {
	mock := &MockExpenseLimitStorage{ctrl: ctrl}
	mock.recorder = &MockExpenseLimitStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseLimitStorage) EXPECT() *MockExpenseLimitStorageMockRecorder {
	return m.recorder
}

// Decrease mocks base method.
func (m *MockExpenseLimitStorage) Decrease(user *types.User, value int64, category string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrease", user, value, category)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrease indicates an expected call of Decrease.
func (mr *MockExpenseLimitStorageMockRecorder) Decrease(user, value, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrease", reflect.TypeOf((*MockExpenseLimitStorage)(nil).Decrease), user, value, category)
}

// Get mocks base method.
func (m *MockExpenseLimitStorage) Get(user *types.User, category string) (types.LimitItem, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", user, category)
	ret0, _ := ret[0].(types.LimitItem)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockExpenseLimitStorageMockRecorder) Get(user, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpenseLimitStorage)(nil).Get), user, category)
}

// List mocks base method.
func (m *MockExpenseLimitStorage) List(user *types.User) (map[string]types.LimitItem, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", user)
	ret0, _ := ret[0].(map[string]types.LimitItem)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockExpenseLimitStorageMockRecorder) List(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExpenseLimitStorage)(nil).List), user)
}

// Set mocks base method.
func (m *MockExpenseLimitStorage) Set(user *types.User, total int64, currency, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", user, total, currency, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockExpenseLimitStorageMockRecorder) Set(user, total, currency, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockExpenseLimitStorage)(nil).Set), user, total, currency, category)
}

// Unset mocks base method.
func (m *MockExpenseLimitStorage) Unset(user *types.User, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", user, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockExpenseLimitStorageMockRecorder) Unset(user, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockExpenseLimitStorage)(nil).Unset), user, category)
}

// MockCurrencyStorage is a mock of CurrencyStorage interface.
type MockCurrencyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyStorageMockRecorder
}

// MockCurrencyStorageMockRecorder is the mock recorder for MockCurrencyStorage.
type MockCurrencyStorageMockRecorder struct {
	mock *MockCurrencyStorage
}

// NewMockCurrencyStorage creates a new mock instance.
func NewMockCurrencyStorage(ctrl *gomock.Controller) *MockCurrencyStorage {
	mock := &MockCurrencyStorage{ctrl: ctrl}
	mock.recorder = &MockCurrencyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyStorage) EXPECT() *MockCurrencyStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCurrencyStorage) Get(user *types.User) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCurrencyStorageMockRecorder) Get(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurrencyStorage)(nil).Get), user)
}

// Set mocks base method.
func (m *MockCurrencyStorage) Set(user *types.User, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", user, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCurrencyStorageMockRecorder) Set(user, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCurrencyStorage)(nil).Set), user, value)
}

// MockCurrencyRatesStorage is a mock of CurrencyRatesStorage interface.
type MockCurrencyRatesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRatesStorageMockRecorder
}

// MockCurrencyRatesStorageMockRecorder is the mock recorder for MockCurrencyRatesStorage.
type MockCurrencyRatesStorageMockRecorder struct {
	mock *MockCurrencyRatesStorage
}

// NewMockCurrencyRatesStorage creates a new mock instance.
func NewMockCurrencyRatesStorage(ctrl *gomock.Controller) *MockCurrencyRatesStorage {
	mock := &MockCurrencyRatesStorage{ctrl: ctrl}
	mock.recorder = &MockCurrencyRatesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRatesStorage) EXPECT() *MockCurrencyRatesStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCurrencyRatesStorage) Add(currency string, date time.Time, rate int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", currency, date, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCurrencyRatesStorageMockRecorder) Add(currency, date, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCurrencyRatesStorage)(nil).Add), currency, date, rate)
}

// Get mocks base method.
func (m *MockCurrencyRatesStorage) Get(currency string, date time.Time) (int64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", currency, date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockCurrencyRatesStorageMockRecorder) Get(currency, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCurrencyRatesStorage)(nil).Get), currency, date)
}
